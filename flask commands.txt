https://flask-sqlalchemy.palletsprojects.com/en/2.x/

export FLASK_APP=edibo_site.py
export FLASK_ENV=development

DB:
flask db init -> create db
flask db migrate -m "users table" -> create migrations scripts
flask db upgrade -> create migratations in db

DB querys:
>>> u = User(username='*', email='*')
>>> db.session.add(u)
>>> db.session.commit()

FIRST TIME
1. Create class with model
2. import models (FROM MODEL DIRECTORY)
   from <app> import db
   db.create_all()

   p = <ModelClassName>(*args)
   db.session.add(p)
   db.session.commit(p)

Methods:
<model>.query.all()
<model>.query.get_all([<object inheritance>, ..])
<model>.query.get()
<model>.query.filter(<model>.<props>.contains('<arg>')).all() / first()
<model>query.filter(<model>.<props>=='<arg>').all() / first()



When install "Flask Manager"
Manager (from bash):
python manage.py db init - First snapshot
python manage.py db migrate
python manage.py db upgrade

python manage.py db stamp heads (for fix: database is up to date)


#many to many
>>> from app import db
>>> from models import Post, Tag
>>> posted = Post.query.filter(Post.id ==1)
>>> post = posted.first()
>>> post.tags
[]





#### Netlify - nice service for share github page





Type Objects:

BaseQuery - 



Imports

flask-wtform   - WTForms (flask) - https://wtforms.readthedocs.io/en/2.3.x/forms/#the-form-class
flask-admin    - Admin (flask) = https://flask-admin.readthedocs.io/en/latest/
flask-security - Security (flask) = https://pythonhosted.org/Flask-Security/



user_datastore - methods:
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_is_numeric', '_prepare_create_user_args', '_prepare_role_modify_args', 'activate_user', 'add_role_to_user', 'commit', 'create_role', 'create_user', 'db', 'deactivate_user', 'delete', 'delete_user', 'find_or_create_role', 'find_role', 'find_user', 'get_user', 'put', 'remove_role_from_user', 'role_model', 'toggle_active', 'user_model']